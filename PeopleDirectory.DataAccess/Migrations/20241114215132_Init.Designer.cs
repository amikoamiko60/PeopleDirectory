// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PeopleDirectory.DataAccess;

#nullable disable

namespace PeopleDirectory.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241114215132_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PeopleDirectory.DataAccess.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("PeopleDirectory.DataAccess.Entities.Individual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("PeopleDirectory.DataAccess.Entities.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IndividualId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("PeopleDirectory.DataAccess.Entities.RelatedIndividual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IndividualId")
                        .HasColumnType("int");

                    b.Property<int>("RelatedIndividualId")
                        .HasColumnType("int");

                    b.Property<int>("RelationshipType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("RelatedIndividualId");

                    b.ToTable("RelatedIndividuals");
                });

            modelBuilder.Entity("PeopleDirectory.DataAccess.Entities.Individual", b =>
                {
                    b.HasOne("PeopleDirectory.DataAccess.Entities.City", "City")
                        .WithMany("Individuals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("PeopleDirectory.DataAccess.Entities.PhoneNumber", b =>
                {
                    b.HasOne("PeopleDirectory.DataAccess.Entities.Individual", "Individual")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Individual");
                });

            modelBuilder.Entity("PeopleDirectory.DataAccess.Entities.RelatedIndividual", b =>
                {
                    b.HasOne("PeopleDirectory.DataAccess.Entities.Individual", "Individual")
                        .WithMany("Relationships")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PeopleDirectory.DataAccess.Entities.Individual", "RelatedPerson")
                        .WithMany()
                        .HasForeignKey("RelatedIndividualId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Individual");

                    b.Navigation("RelatedPerson");
                });

            modelBuilder.Entity("PeopleDirectory.DataAccess.Entities.City", b =>
                {
                    b.Navigation("Individuals");
                });

            modelBuilder.Entity("PeopleDirectory.DataAccess.Entities.Individual", b =>
                {
                    b.Navigation("PhoneNumbers");

                    b.Navigation("Relationships");
                });
#pragma warning restore 612, 618
        }
    }
}
